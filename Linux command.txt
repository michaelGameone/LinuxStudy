==========================================
$                                        $
$     (A) Finding Files or Directories   $
$                                        $ 
==========================================

(1) Find
|__ It is a command for search the location of certain files and directories
|__ syntax: find [the location of the directory where the search starts (relative or absolute path)] -name [name list of files/directories]

example 1:
find . -name "abc.txt"
where the search start from the current directory (i.e. ".") and the target file name is "abc.txt"  

example 2:
find / -name "abc.txt" 
It will search the file starting from the root directory "/"

(2) Locate
* need to install "mlocate" before using this command:
(1) apt install mlocate
OR
(2a) rpm -qa | grep mlocate
(2b) yum install mlocate

Also, if "locate" command does not output any results, then as root run "updatedb"

|__ it use a "DB" to store the file location information in a "DB" or cache.
|__ therefore, it runs faster than "Find" command, but may not be updated with "DB". Therefore, need to 
    run "updatedb"
|__ syntax: locate [name file]

example:
locate abc.txt
==> it will search the whole machine for the target file named "abc.txt"







=========================================================
$                                                       $ 
$ (B) Create, Delete, Copy and Move files/directories   $ 
$                                                       $ 
=========================================================

(1) mv
|__ it is a command for moving file(s)/directory(ies) to new location
|__ syntax: mv [files list/directories list (in the current directory or relative path/absolute path)] [destination (relative path/absolute path]

Example:
Suppose there is a file called "abc" inside "ParentFolder" folder.
And there is a sub-folder called "ChildFolder" nested inside "ParentFolder"
Inside the "ChildFolder, type the following:
mv ./../abc .

It will move the file originally located in relative path "./../abc" where "." means current directory and ".." means parent directory to
the new directory "." which mean the current directory where the command is typed "i.e. the "ChildFolder".

|__ Rename a existing file:
    |__ mv existingFileName newFileName


(2) cp
|__ example 1: cp existingFile newFile
|__ example 2: cp existingFile AnOtherDirecoty
|__ example 2: cp -R existingDirectory newDirectory


(3) rm
|__ example 1: rm delFileName    

(4) mkdir

(5) rmdir or rm -r
    |__ you usually add option "-f" to suppress the prompt during the deletion of directory process. i.e. rm -rf [directory to be deleted]



==========================================
$                                        $
$            (C) Wild Card               $
$                                        $ 
==========================================

WildCard placeholder
(1) * : this represent a zero, one or more than one character(s)
(2) ? : represent a single character
(3) {} : represent a range of characters
(4) [] : represent a single character from a set of characters inside the bracket []
(5) \ : as an escape character
(6) ^ : the beginning of the line
(7) $ : the end of the line

Example 1:
(1) create some files first as follows:
touch abc abc1 abcd ab abc.con

(2) Delete all files starting with "abc"
rm abc*

(3) the result is only the following file left:
ab

Example 2:
touch abc{d..f}{1..2}

The result is 6 files are created as follows:
abcd1 abcd2 abce1 abce2 abcf1 abcf2


Example 3:
ls -l *.txt
It will list out all the text files

Example 4:
(1) create some files as follows:
touch abccd abcd abc ab
==> files created: abccd abcd abc ab

(2) 
command 1: ls -l ab?d
it will only list out the following files:
abcd

command 2: ls -l ab?
abc

Example 5:
(1) create the belows files
file1 file2 file12

(2) ls -l *[12]
==> file1 file2 file12

(3) ls -l *[1]
==> file1 

(4) ls -l *[2]
==> file2 file12

==========================================
$                                        $
$       (D) Soft and Hard Link           $
$                                        $ 
==========================================
Suppose there is a file called "originalFile" inside "ParentFolder"
And there is sub-folder called "ChildFolder" nested inside "ParentFolder"
Inside the "ChildFolder", create the soft link and hard link as follows:

ln -s ./../originalFile softLinkHere
ln ./../originalFile hardLinkHere

after you create the link, u will see "softLinkHere" has the properties starting with letter "l" to represent it is a soft link
On the other hand, u will see "hardLinkHere" has the properties starting with "-" ti represen it is a file, but with pointer count(inode) = 2 to 
indicate that there is 2 files pointing to one actual file location with the same inode (you can type "ls -li" to list out the inode number. They should be the same)


if you change one of the 3 files (namely, originalFile, softLinkHere or hardLinkHere), all 3 files will change

But if you remove the original file (i.e.originalFile), the "softLinkHere" becomes invalid but "hardLinkHere" still here but with file pointer count reduce to 1

==========================================
$                                        $
$       (E) File permission              $
$                                        $ 
==========================================
(1) Ownership of the file
User ==> the use who create the file
Group ==> the group that the user (who in turn create the file) belongs to


(2) Change file permission

command: chmod

Example 1: 
==> discard "read" permission for group user:
chmod g-r fileName

Example 2: 
==> add "read" permission for group user:
chmod g+r fileName



Example 2: 
==> add "read" permission for group user:
chmod g+r fileName


Example 3: 
==> remove "read" permission for ALL user:
chmod a-r fileName


Example 4: 
==> remove "read" permission for you:
chmod u-r fileName


Example 5: 
==> remove "read" permission for others user (i.e. except you and group):
chmod o-r fileName


Example 6:
==> remove access right to directory for others user
chmod o-x directoryName

Using the number to assign right
- 0: no permission
- 1: execute
- 2: write
- 3: execute and write
- 4: read
- 5: read and execute
- 6: read and write
- 7: read and write and execute

example:
chmod 764 fileName
==> it will end ups property "-rwxrw-r--"


Example 7:
==> add/change some permission recursively on a directory (i.e. apply the changes to its subdirectories recursively)
chmod o+w =R myDir

***************************************************
      Directory permission right
***************************************************
(1) Directories has specified the right for the following user identity:
    (a) the right of the Directories' user owner
    (b) the right of the Directories' group owner
    (c) the right of the user who is neither user owner nor belongs to the owner group of the directories.
    (d) The special right given to user or group through "setfacl" command.

(2) after determine whoch identity (i.e from a to d above) the current user belongs to, the corresponding right will be assigned to that user

(3) The access right of the directory has the following efect:
    (a) Read (r):  User can view what files/sub-direcotries inside that directory (i.e. command ls)
                   Without "Read (r)" right, user can't use "ls" command to list out all files/directories inside that directory.    
    (b) Execute (x): allow user to enter the directory (command "cd")
	             Without "Execute(x)" right, user can't "cd" into that directories.
    (c) Write (w): user can create files/sub-directories inside the parent directory. User can also remove the files/sub-directories, or rename a file or directories
                   Without the "Write (w)" right, user can't "mkdir" a direcoty, "touch" any new files, "rm" any files or directoriesls, "mv" anyl files or directories.


The order of identifying a user into which identity he belongs to as follows:
(1) check if user is the file user owner ==> (2) if not, then check if the user is the users defined in "setfacl" command ==> (3) if not, then check if the user belongs to the owner group ==> (4) if not, then check if the user belongs to the group defined in command "setfacl" ==> (5) if not, then user automatically belongs to "other"

***************************************************


***************************************************
      su, sudo
***************************************************
The root account is the superuser who has all the right.
If you want another user also assigned with the same superuser right, add them into "sudoer" file
The file is "/etc/sudoers"
"vi" into it, and add " userName ALL=(ALL) ALL" inside the file
Or you can type command "visudo", which has the same effect by "vi" into "/etc/sudoers" file

Then that user can now execute the superuser command by preceding it with "sudo" command.
|__ source: https://www.baeldung.com/linux/username-not-in-sudoers-file

- switch to root account
  |__ su -
- switch to other user
  |__ su - userName


(3) Change ownership

command: chown
|__ changes user ownership of a file

command: chgrp
|__ changes group ownership

Recursive change:
|__ -R

chown newOwnerName fileName
chown newUserOwner:newGroupOwner fileName
chgrp newGroupName fileName

The permission of the directory will override all the files and directories nested inside it.
 
If you want to changes the group of a directory and everything nested inside it, you can change the group recursively as follows:
chgrp -R newGroup targetDirectory


(4) Access Control List (ACL)
* may need to install acl first with the following command:
apt install acl



command: setfacl
add permission for a specific user
|__ syntax: setfact -m u:[use name]:[access right: rwx] [path of the target file]

add permission for a group
|__ syntax: setfacl -m g:[group name]:[access right: rwx] [path of the target file]

allow all files or directories to inherit ACL entries from the directory it is within
|__ syntax: setfacl -R -m "entry" [path of the target directory]
    e.g setfacl -R -m u:michael:rw targetFolderName


remove entry
|__ syntax: setfacl -x u:[user name] [path of the target file]


remove all entries
|__ syntax: setfacl -b [path of the target file]


command: getfacl
|__ syntax: getfacl [file name]


==========================================
$                                        $
$       (F) Input and Output             $
$                                        $ 
==========================================
In linux, everything (including devices, drive) is file
Therefore, standard input is a file with file descriptor = 0
Standard output is a file with file descriptor = 1
Standard error is a file with file descriptor = 2

Default output of command is 1

Example: feeding the input into the cmd "mail"

(1) redirect input from a file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mail -s "mail title" targetEmail@address.com < letterContent


(2) direct error output to a file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls -l /root 2> errorFile
telnet localhost 2> errorfile

(3) Add text to files
~~~~~~~~~~~~~~~~~~~~~~~~~            
(a) vi
(b) > or >> (redirect output to a file)
(c) echo > or >>


(i) echo
|__ create file with text already
example: echo "some text here" > newFileName

(ii) append some text to existing file
example: echo "some more text here" >> existingFileName

(iii) > or >> (redirect output to a file)
|__ you can direct any text output of any linux command (e.g. ls) to a file

example: ls -l > fileName

you can mixed "<" and ">"/">>" executed from left to right
example:
cat < file1 >> file2
|__ it will append file1 content to file2


(4) counting words in text file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(a) wc -c fileName


(5) tee command
~~~~~~~~~~~~~~~~~~~~~~~~~ 
tee command can store and view the output at the same time
example:
echo "some text" | tee newFileName

if append text to existing file
echo "more text" | tee -a existingFileName


(6) PIPES "|"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
==> connect the ouput from first command to the input of the second command

example:
ls -ltr | more


(7) Cat
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


(8) more
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
display one page at a time when press the spacebar

cat fileName | more
Or
more fileName


(9) less
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
display one page ==> space bar
display one line down ==> j/down arrow
display one line up ==> k/up arrow

cat fileName | less
Or
less fileName


(10) head
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
display first N lines of the file ==> head -N fileName

e.g. head -2 fileName
     |__ display first 2 lines of the file



(11) tail
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
display last N Lines of the file ==> tail -N fileName

e.g. tail -2 fileName
     |__ display last 2 lines of the file
	 
	 
(12) cut
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Suppose there is a csv like the following:

OrderID,CustomerID,ProductID,Qty,Date
1,3,5,1,2023-8-3
2,3,8,10,2024-3-1
3,2,11,3,2024-3-2

cut -d, -f 3 csvFileName 
|__ the following is the output:
ProductID
5
8
11

- syntax: cut -d[delimiter character] -f [which column(s) after delimited] [csv file name]

example
cut -d, -f 2-5 csvFileName 
|__ the following is the output:

CustomerID,ProductID,Qty,Date
3,5,1,2023-8-3
3,8,10,2024-3-1
2,11,3,2024-3-2



example
cut -d, -f 2,5 csvFileName 
|__ the following is the output:
CustomerID,Date
3,2023-8-3
3,2024-3-1
2,2024-3-2


It can be used for getting the piped data

example
ls -l | cut -c2-4



(13) awk
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Suppose a table like below

Date forecast temp
2023-3-8 sunny  23
2023-3-9 rainny 21
2023-3-10 cloudy 20

awk '{print $1}' tableFileName
|__ the following is the output
Date
2023-3-8
2023-3-9
2023-3-10

awk '{print $1, $3}' tableFileName
|__ the following is the output
Date temp
2023-3-8 23
2023-3-9 21
2023-3-10 20

awk '{print $NF}' tableFileName
|__ the following is the output
temp
23
21
20


It also can use the piped data:
///////////////////////////////////
ls -l | awk '{print $9}'


Find all the lines contain specific words:

Suppose there is conversation with the following content
`````````````````````````````````````````````````````````
hello John
Very nice to meet you!
How are you doing John?
I hope you are fine.
Bye John

Let's find all sentence including the word "John"
==> awk '/John/ {print}' conversationFile
|__ the following is the output:
hello John
How are you doing John?
Bye John

awk can also used to extract columns of CSV
==> awk -F, '{print $1}' csvFileName
OrderID
1
2
3

syntax: awk -F[delimiter] '{print $[column no]' [csv file name]


Replace certain column name with the new one:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
echo "hello john" | awk '{$2="Adam"; print $0}'
==> hello Adam

echo "hello john" | awk '{$2="Adam"; print $1}'
==> hello

echo "hello john" | awk '{$2="Adam"; print $2}'
==> Adam


example 2:
cat fileName | awk '$2="snowy"; print $0}'

output:
Date snowy temp
2023-3-8 snowy 23
2023-3-9 snowy 21
2023-3-10 snowy 20

Find the row with matching column value
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Suppose a table like below

Date forecast temp
2023-3-8 sunny  23
2023-3-9 rainny 21
2023-3-10 cloudy 20

how find all the rainny day
|__ awk '{if($2 == "rainny") print $0;}' tableFileName

output:
2023-3-9 rainny 21

Count how many columns
~~~~~~~~~~~~~~~~~~~~~~~~~~~
ls -la | awk '{print NF}'




(14) grep and egrep
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(1) find all the lines with the matching keywords
syntax: grep keyword fileName

example 1:
grep John conversation

Output:
hello John
How are you doing John?
Bye John

example 2:
grep -c John conversation
|__ return how many lines matching the keyword

Output:
3

example 3:
grep -i jOHn conversation
|__ return how many lines matching the keyword (case insensitive)


example 4:
grep -n John conversation
|__ return line number and the matching lines 

example 5:
grep -v John conversation
|__ return line NOT matching the condition

example 6:
egrep -i "Hello|Bye|" converstion
|__ return line matching one of the keywords in the set




(15) sort
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sort the lines in the file in the alphabetical/numerical order

syntax 1: sort filename
        |__ sort in ascending order
		
syntax 2: sort -r filename
        |__ sort in descending order
		
example 1: egrep -ni "hello|bye" conversation | sort -r

output:
5:Bye John
1:hello John

example 2: ls -la | sort
example 3: ls -la | sort -k9
           |__ sorting the files listing information for the colume 9 (i.e. the file/direcotry name)
		  

(16) uniq
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
syntax: sort filename | uniq
        |__ elimate the duplicated lines
		


(17) wc
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
syntax: wc fileName


(10) Compare files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
diff file1 file2
|__ output the lines that are different

cmp file1 file2
|__ output the line number that are different


(11) Compress and Uncompress file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



==========================================
$                                        $
$       (G) date time                    $
$                                        $ 
==========================================
(1) command: date


==========================================
$                                        $
$  (H) Compress an Uncompress file       $
$                                        $ 
==========================================
(1) tar
Compression:
|__ syntax: tar cvf [final tar file name] [source files+directories path]

Uncompression:
|__ synctax: tar xvf [tar file name]

compress example:
tar cvf everything.tar .

uncompress example:
tar xvf everything.tar


(2) gzip -d OR gunzip
Compression:
|__ syntax: gzip [target file(s)]

example: gzip someFile

Uncompression:
|__ syntax: gunzip [target file(s)]

==========================================
$                                        $
$  (I) Vi and Vim Editor                 $
$                                        $ 
==========================================
Mode:
Insert Mode (I)
|__ after the insert mode: you can freely type any text you want to the file
|__ press "Ecape" to exit the insert mode

Command Mode
|__ press "shift"+"Z" +"Z" to save and exit the vi
|__ type :qw! to save and exit the vi
|__ in command mode, you can do the following:
    |__ type dd to remove the whole line
    |__ type U to undo
	|__ type x to delete one character at a time
	|__ type O to insert a new line
	|__ type /[the search word]
	|__ :q! ==> quit without saving
	
https://www.openvim.com/

https://vim-adventures.com/


==========================================
$                                        $
$  (J) Text Replacement                  $
$                                        $ 
==========================================

Command: Sed
|_ syntax: sed 's/[target wordling]/[replacement wording]/g'[name of the target file]
|__ output: only change on the screen output, not the file

|_ syntax: sed -i 's/[target wordling]/[replacement wording]/g'[name of the target file]
|__ output: change to the file


remove the word
|_ syntax: sed 's/[target wordling]//g'[name of the target file]

delete the line containing specific words
|__ syntax: sed '/[target wording]/d' [target file]

delete the empty line containing specific words
|__ syntax: sed '/^$/d" [target file]


==========================================
$                                        $
$       (K) User Management              $
$                                        $ 
==========================================

(1) useradd
- syntax: useradd [new user name]

example:
useradd batman

Verify the new user is created:
- syntax: id [new user name]
exmaple:
id batman

Also, if the new user is created, the corresponding folder is also created in home directory

you can specify the new user in details when creating a new account for them as follows:
- (1) which group he belongs to
- (2) which bash he will use
- (3) what description about this user
- (4) which home directory he is using
- (5) the name of the new user
 
example:
useradd -g groupThatnewUserBelongTo -s /bin/bash -c "decription of this new user" -m -d /home/newUserHomeDir newUserName


(2) groupadd
- syntax: groupadd [new group name]

example:
groupadd devGrp

Verify the group is created:
cat /etc/group

it will show the list of groups


(3) userdel
syntax1: userdel -r [user to be deleted]
        |__ it will delete the corresponding user' directories in the "home" directory
     
 syntax2: userdel [user to be deleted]
          |__ the corresponding user's directory is perserved



(4) groupdel
syntax: groupdel [group to be deleted]

example:
groupdel devGrp


(5) usermod
syntax: usermod -G [group name to be assigned to] [user name]
        |__ assign the user to a new group, but the existing group he belongs to will still valid
        |__ however, the file/directory owned by the user is still owned by the previous group that user belongs to

==========================================
$                                        $
$       (L)  Monitor User ACtivity       $
$                                        $ 
==========================================

(6) chgrp
syntax: chgrp -R [the new group that all files/directory currently owned by the user will change to] [user name]
        |__ example: user "sam" used to belong group "sam". so all the directory/files owned by sam will be also owned by group "sam".
                     However, after executing the command "chgrp -R devGrp sam", all the files/directories owned by same will now belonged
                     to group "devGrp"

(7) check the password and the group

(i) where to check the group list:
    - cat /etc/group

(ii) where to check the user password:
    - cat /etc/passwd
    - the output would be something like the following:
      ==> sam:x:1001:1001::/home/sam:/bin/bash
      The above corresponds to ==> [user name]:[undisclosed passowrd]:[user id]:[group id]:[user description]:[user home directory path]:[user bash path]

(iii) where to check the encripted user password:
- cat /etc/shadow


(v) set the password for a user
syntax: passwd [user name]  

(8) id
    |__ syntax id [user name]
    - check the information (such as user id, group id) of a particular user.
   


(9) when password is expired
    |__ command: chage
    |__ command option:
        |__ -d: this is the last modified password date. This is defined not by UTC but how many days since 1-1-1970
        |__ -m: the minumum days between each password changed.
        |__ -M: maximum day that this password is still valid since its last changed.
        |__ -W: how many days prior to the password expiry date that should a warning given to user telling him changing the password
        |__ -I: the number of days after password expireds that account is disabled.
        |__ -E: The absolute date that this account became disabled no matter it is expired or not. The time is defined as how many days after 1-1-1970

    |__ example: chage -m 7 -M 365 -W 30 -I 1 John
        |__ it means once its password has changed, it takes at least 7 days to make another change. Also, the password will be expired after 1 year. The notification telling the user to change his/her password will be sent 1 month before it expires. After the password expires, it will take another 1 day to make account completely disable.


    The file set the default password age, password length ..etc:
    |__ /etc/login.defs

 
********************************
   ssh
******************************
syntax: ssh userName@hostnameOrIP 
example: ssh michael@192.168.0.148

|__ source: https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/factoryos/connect-using-ssh?view=windows-11

- command: exit
  |__ logout from current user

  

